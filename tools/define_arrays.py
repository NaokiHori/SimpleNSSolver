# define macros to access arrays easily
# for 1D, x-face, x-center, and their distances are defined
# for ND, arrays to hold velocity, pressure, temperature, etc. are defined

import os
import sys
import re


def get_lbound(lbound):
    # -1 -> "2"
    #  0 -> "1"
    # +1 -> "0"
    lbound = - lbound + 1
    return f"{lbound}"


def get_ubound(ubound, prefix):
    # -1 -> "isize-1"
    #  0 -> "isize+0"
    # +1 -> "isize+1"
    return f"{prefix}{ubound:+d}"


def get_nitems(lbound, ubound):
    # get size of a vector whose lower- / upper-bounds are given
    # e.g.
    #    nitems = isize+1 if lbound = 1 and ubound = isize+1
    #    nitems = jsize+2 if lbound = 0 and ubound = jsize+1
    # extract numbers
    s_ = re.sub("[a-zA-Z]", "", lbound.strip())
    e_ = re.sub("[a-zA-Z]", "", ubound.strip())
    s_ = int(s_)
    if e_ == "":
        e_ = 0
    else:
        e_ = int(e_)
    nitems = f"{e_ - s_ + 1:+d}"
    return nitems


def get_index(index, lbound):
    # get index of a vector whose lower-bound is given
    # e.g.
    #   return I-1 if lbound is  1 to map I =  1 to the head of vector
    #   return I+1 if lbound is -1 to map I = -1 to the head of vector
    if lbound == "0":
        return f"{index}  "
    else:
        val = -int(lbound)
        return f"{index}{val:+d}"


def get_index_1d(lbound_0):
    iindex = get_index("I", lbound_0)
    string = (
        f"({iindex})"
    )
    return string


def get_index_2d(nitems_0, lbound_0, lbound_1):
    iindex = get_index("I", lbound_0)
    jindex = get_index("J", lbound_1)
    string = (
        f"({iindex})"
        f" + "
        f"(isize{nitems_0})"
        f" * "
        f"({jindex})"
    )
    return string


def get_index_3d(nitems_0, nitems_1, lbound_0, lbound_1, lbound_2):
    iindex = get_index("I", lbound_0)
    jindex = get_index("J", lbound_1)
    kindex = get_index("K", lbound_2)
    string = (
        f"({iindex})"
        f" + "
        f"(isize{nitems_0})"
        f" * "
        f"("
        f"({jindex})"
        f" + "
        f"(jsize{nitems_1})"
        f" * "
        f"({kindex})"
        f")"
    )
    return string


def output(dname, vname, text):
    fname = f"{dname}/{vname}.h"
    # attach include-guard
    include_guard = fname.replace("/", "_").replace(".", "_").upper()
    header = (
            f"#if !defined({include_guard})\n"
            f"#define {include_guard}\n"
            f"\n"
            f"// This file is generated by {sys.argv[0]}\n"
            f"\n"
    )
    footer = (
            f"#endif // {include_guard}\n"
    )
    with open(fname, "w") as f:
        f.write("".join([header, text, footer]))


def gen_1d(dname, vname, bounds):
    # prepare macros for one-dimensional vector
    lbound_0 = get_lbound(bounds[0])
    ubound_0 = get_ubound(bounds[1], "isize")
    index_1d = get_index_1d(lbound_0)
    char_0 = "I"
    text = (
            f"// [{lbound_0} : {ubound_0}]\n"
            f"#define {vname.upper()}({char_0})"
            f" ({vname}[{index_1d}])\n"
            f"#define {vname.upper()}_NADDS"
            f" (int [2]){{{bounds[0]}, {bounds[1]}}}\n"
            f"\n"
    )
    output(dname, vname, text)


def gen_nd(dname, vname, bounds):
    # prepare macros for N-dimensional array
    lbound_0 = get_lbound(bounds[0][0])
    ubound_0 = get_ubound(bounds[0][1], "isize")
    lbound_1 = get_lbound(bounds[1][0])
    ubound_1 = get_ubound(bounds[1][1], "jsize")
    lbound_2 = get_lbound(bounds[2][0])
    ubound_2 = get_ubound(bounds[2][1], "ksize")
    char_0 = "I"
    char_1 = "J"
    char_2 = "K"
    nitems_0 = get_nitems(lbound_0, ubound_0)
    nitems_1 = get_nitems(lbound_1, ubound_1)
    index_2d = get_index_2d(
            nitems_0,
            lbound_0,
            lbound_1
    )
    index_3d = get_index_3d(
            nitems_0,
            nitems_1,
            lbound_0,
            lbound_1,
            lbound_2
    )
    text = str()
    # 2D array (not for z-related things)
    if "z" not in vname:
        text += (
            f"#if NDIMS == 2\n"
            f"// [{lbound_0} : {ubound_0}],"
            f" [{lbound_1} : {ubound_1}]\n"
            f"#define {vname.upper()}({char_0}, {char_1})"
            f" ({vname}[{index_2d}])\n"
            f"#define {vname.upper()}_NADDS"
            f" (int [NDIMS][2]){{"
            f" {{{bounds[0][0]}, {bounds[0][1]}}},"
            f" {{{bounds[1][0]}, {bounds[1][1]}}},"
            f" }}\n"
            f"#endif\n"
            f"\n"
        )
    # 3D array
    text += (
        f"#if NDIMS == 3\n"
        f"// [{lbound_0} : {ubound_0}],"
        f" [{lbound_1} : {ubound_1}],"
        f" [{lbound_2} : {ubound_2}]\n"
        f"#define {vname.upper()}({char_0}, {char_1}, {char_2})"
        f" ({vname}[{index_3d}])\n"
        f"#define {vname.upper()}_NADDS"
        f" (int [NDIMS][2]){{"
        f" {{{bounds[0][0]}, {bounds[0][1]}}},"
        f" {{{bounds[1][0]}, {bounds[1][1]}}},"
        f" {{{bounds[2][0]}, {bounds[2][1]}}},"
        f" }}\n"
        f"#endif\n"
        f"\n"
    )
    output(dname, vname, text)


def domain(root):
    dname = f"{root}/domain"
    os.system(f"rm {dname}/*.h")
    gen_1d(dname, "xf",     (+0, +1))
    gen_1d(dname, "xc",     (+1, +1))
    gen_1d(dname, "dxf",    (+0, +0))
    gen_1d(dname, "dxc",    (+0, +1))


def fluid(root):
    dname = f"{root}/fluid"
    os.system(f"rm {dname}/*.h")
    gen_nd(dname, "ux",    ((+0, +1), (+1, +1), (+1, +1)))
    gen_nd(dname, "uy",    ((+1, +1), (+1, +1), (+1, +1)))
    gen_nd(dname, "uz",    ((+1, +1), (+1, +1), (+1, +1)))
    gen_nd(dname, "p",     ((+1, +1), (+1, +1), (+1, +1)))
    gen_nd(dname, "t",     ((+1, +1), (+1, +1), (+1, +1)))
    gen_nd(dname, "psi",   ((+1, +1), (+1, +1), (+1, +1)))
    gen_nd(dname, "srcux", ((-1, +0), (+0, +0), (+0, +0)))
    gen_nd(dname, "srcuy", ((+0, +0), (+0, +0), (+0, +0)))
    gen_nd(dname, "srcuz", ((+0, +0), (+0, +0), (+0, +0)))
    gen_nd(dname, "srct",  ((+0, +0), (+0, +0), (+0, +0)))


def statistics(root):
    dname = f"{root}/statistics"
    os.system(f"rm {dname}/*.h")
    gen_nd(dname, "ux1", ((+0, +1), (+0, +0), (+0, +0)))
    gen_nd(dname, "ux2", ((+0, +1), (+0, +0), (+0, +0)))
    gen_nd(dname, "uy1", ((+1, +1), (+0, +0), (+0, +0)))
    gen_nd(dname, "uy2", ((+1, +1), (+0, +0), (+0, +0)))
    gen_nd(dname, "uz1", ((+1, +1), (+0, +0), (+0, +0)))
    gen_nd(dname, "uz2", ((+1, +1), (+0, +0), (+0, +0)))
    gen_nd(dname, "t1",  ((+1, +1), (+0, +0), (+0, +0)))
    gen_nd(dname, "t2",  ((+1, +1), (+0, +0), (+0, +0)))
    gen_nd(dname, "uxt", ((+0, +1), (+0, +0), (+0, +0)))


if __name__ == "__main__":
    root = "include/array_macros"
    # coordinates in the wall-normal direction
    domain(root)
    # velocity, pressure, etc.
    fluid(root)
    # arrays to store temporally-averaged statistics
    statistics(root)
